# Base Arguements to leverage across build stages
ARG APP_DIR=/app

#############
# Build (Prepare Environment) image
#############
FROM python:3.10-slim-buster AS build
ARG APP_DIR

RUN apt-get update && apt-get install -y \
  curl \
  build-essential \
  libffi-dev \
  sudo \  
   && rm -rf /var/lib/apt/lists/*

# install poetry and add to path 
ENV POETRY_VERSION=1.1.12
RUN curl -sSL https://install.python-poetry.org | python -
ENV PATH /root/.local/bin:$PATH

# change work directory for where our app will live
WORKDIR ${APP_DIR}
COPY pyproject.toml poetry.lock ./

# Copy over the venv including any symbolic links, do not install development/testing libraries when install poetry dependencies
RUN python -m venv --copies ${APP_DIR}/venv
COPY ./ ./venv
RUN . ${APP_DIR}/venv/bin/activate && poetry install --no-dev

#COPY setup_on_ubuntu_docker.sh setup_on_ubuntu_docker.sh

#############
# Deployment image
#############
FROM python:3.10-slim-buster as run
ARG APP_DIR

COPY --from=build ${APP_DIR}/venv ${APP_DIR}/venv/
ENV PATH ${APP_DIR}/venv/bin:$PATH
COPY  . ./

#below unnecessary utilizing environment variable
#copy the main.py with the reference to the non-local redis server
#COPY  ./src/main_deploy.py ./src/main.py

HEALTHCHECK --start-period=30s CMD python -c "import requests; requests.get('http://localhost:8000/health', timeout=2)"

CMD ["uvicorn", "lab3.main:app", "--host", "0.0.0.0", "--port", "8000"]